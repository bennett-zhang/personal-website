{"version":3,"sources":["jquery.inview.js"],"names":["factory","define","amd","exports","module","require","jQuery","$","getViewportSize","mode","domObject","size","height","w","innerHeight","width","innerWidth","d","compatMode","support","boxModel","documentElement","body","clientHeight","clientWidth","getViewportOffset","top","pageYOffset","scrollTop","left","pageXOffset","scrollLeft","checkInView","inviewObjects","length","i","$elements","map","inviewObject","selector","data","$element","find","viewportSize","viewportOffset","contains","elementSize","offsetHeight","offsetWidth","elementOffset","offset","inView","trigger","timer","document","window","event","special","inview","add","push","this","element","setInterval","remove","guid","splice","clearInterval","bind","addEventListener","attachEvent"],"mappings":"CAKC,SAAUA,GACY,mBAAVC,QAAwBA,OAAOC,IAExCD,QAAQ,UAAWD,GACS,iBAAZG,QAEhBC,OAAOD,QAAUH,EAAQK,QAAQ,WAGjCL,EAAQM,QATZ,CAWE,SAAUC,GAwCV,SAASC,IACP,IAAIC,EAAMC,EAAWC,GAASC,OAAQC,EAAEC,YAAaC,MAAOF,EAAEG,YAiB9D,OAbKL,EAAKC,UACRH,EAAOQ,EAAEC,aACIX,EAAEY,QAAQC,WAIrBT,GACEC,QAJFF,EAAqB,eAATD,EACVY,EACAJ,EAAEK,MAEgBC,aAClBR,MAAQL,EAAUc,cAKjBb,EAGT,SAASc,IACP,OACEC,IAAMb,EAAEc,aAAeN,EAAgBO,WAAeX,EAAEK,KAAKM,UAC7DC,KAAMhB,EAAEiB,aAAeT,EAAgBU,YAAed,EAAEK,KAAKS,YAIjE,SAASC,IACP,GAAKC,EAAcC,OAAnB,CAIA,IAAIC,EAAI,EAAGC,EAAY7B,EAAE8B,IAAIJ,EAAe,SAASK,GACnD,IAAIC,EAAYD,EAAaE,KAAKD,SAC9BE,EAAYH,EAAaG,SAC7B,OAAOF,EAAWE,EAASC,KAAKH,GAAYE,IAM9C,IAHAE,EAAiBA,GAAkBnC,IACnCoC,EAAiBA,GAAkBnB,IAE5BU,EAAEF,EAAcC,OAAQC,IAE7B,GAAK5B,EAAEsC,SAASxB,EAAiBe,EAAUD,GAAG,IAA9C,CAIA,IAAIM,EAAgBlC,EAAE6B,EAAUD,IAC5BW,GAAkBlC,OAAQ6B,EAAS,GAAGM,aAAchC,MAAO0B,EAAS,GAAGO,aACvEC,EAAgBR,EAASS,SACzBC,EAAgBV,EAASD,KAAK,UAOlC,IAAKI,IAAmBD,EACtB,OAGEM,EAAcvB,IAAMoB,EAAYlC,OAASgC,EAAelB,KACxDuB,EAAcvB,IAAMkB,EAAelB,IAAMiB,EAAa/B,QACtDqC,EAAcpB,KAAOiB,EAAY/B,MAAQ6B,EAAef,MACxDoB,EAAcpB,KAAOe,EAAef,KAAOc,EAAa5B,MACrDoC,GACHV,EAASD,KAAK,UAAU,GAAMY,QAAQ,WAAW,IAE1CD,GACTV,EAASD,KAAK,UAAU,GAAOY,QAAQ,WAAW,MA5GxD,IAAwBT,EAAcC,EAC6BS,EAD/DpB,KACAhB,EAAIqC,SAAUzC,EAAI0C,OAAQlC,EAAkBJ,EAAEI,gBAElDd,EAAEiD,MAAMC,QAAQC,QACdC,IAAK,SAASnB,GACZP,EAAc2B,MAAOpB,KAAMA,EAAMC,SAAUlC,EAAEsD,MAAOC,QAASD,QAWxDR,GAASpB,EAAcC,SACzBmB,EAAQU,YAAY/B,EAAa,OAItCgC,OAAQ,SAASxB,GACf,IAAK,IAAIL,EAAE,EAAGA,EAAEF,EAAcC,OAAQC,IAAK,CACzC,IAAIG,EAAeL,EAAcE,GACjC,GAAIG,EAAawB,UAAYD,MAAQvB,EAAaE,KAAKyB,OAASzB,EAAKyB,KAAM,CACzEhC,EAAciC,OAAO/B,EAAG,GACxB,OAKCF,EAAcC,SAChBiC,cAAcd,GACdA,EAAQ,QAgFf9C,EAAEM,GAAGuD,KAAK,2BAA4B,WACpCzB,EAAeC,EAAiB,QAI7BvB,EAAgBgD,kBAAoBhD,EAAgBiD,aACvDjD,EAAgBiD,YAAY,YAAa,WACvC1B,EAAiB","file":"../jquery.inview.min.js","sourcesContent":["/**\n * author Christopher Blum\n *    - based on the idea of Remy Sharp, http://remysharp.com/2009/01/26/element-in-view-event-plugin/\n *    - forked from http://github.com/zuk/jquery.inview/\n */\n(function (factory) {\n  if (typeof define == 'function' && define.amd) {\n    // AMD\n    define(['jquery'], factory);\n  } else if (typeof exports === 'object') {\n    // Node, CommonJS\n    module.exports = factory(require('jquery'));\n  } else {\n      // Browser globals\n    factory(jQuery);\n  }\n}(function ($) {\n\n  var inviewObjects = [], viewportSize, viewportOffset,\n      d = document, w = window, documentElement = d.documentElement, timer;\n\n  $.event.special.inview = {\n    add: function(data) {\n      inviewObjects.push({ data: data, $element: $(this), element: this });\n      // Use setInterval in order to also make sure this captures elements within\n      // \"overflow:scroll\" elements or elements that appeared in the dom tree due to\n      // dom manipulation and reflow\n      // old: $(window).scroll(checkInView);\n      //\n      // By the way, iOS (iPad, iPhone, ...) seems to not execute, or at least delays\n      // intervals while the user scrolls. Therefore the inview event might fire a bit late there\n      //\n      // Don't waste cycles with an interval until we get at least one element that\n      // has bound to the inview event.\n      if (!timer && inviewObjects.length) {\n         timer = setInterval(checkInView, 250);\n      }\n    },\n\n    remove: function(data) {\n      for (var i=0; i<inviewObjects.length; i++) {\n        var inviewObject = inviewObjects[i];\n        if (inviewObject.element === this && inviewObject.data.guid === data.guid) {\n          inviewObjects.splice(i, 1);\n          break;\n        }\n      }\n\n      // Clear interval when we no longer have any elements listening\n      if (!inviewObjects.length) {\n         clearInterval(timer);\n         timer = null;\n      }\n    }\n  };\n\n  function getViewportSize() {\n    var mode, domObject, size = { height: w.innerHeight, width: w.innerWidth };\n\n    // if this is correct then return it. iPad has compat Mode, so will\n    // go into check clientHeight/clientWidth (which has the wrong value).\n    if (!size.height) {\n      mode = d.compatMode;\n      if (mode || !$.support.boxModel) { // IE, Gecko\n        domObject = mode === 'CSS1Compat' ?\n          documentElement : // Standards\n          d.body; // Quirks\n        size = {\n          height: domObject.clientHeight,\n          width:  domObject.clientWidth\n        };\n      }\n    }\n\n    return size;\n  }\n\n  function getViewportOffset() {\n    return {\n      top:  w.pageYOffset || documentElement.scrollTop   || d.body.scrollTop,\n      left: w.pageXOffset || documentElement.scrollLeft  || d.body.scrollLeft\n    };\n  }\n\n  function checkInView() {\n    if (!inviewObjects.length) {\n      return;\n    }\n\n    var i = 0, $elements = $.map(inviewObjects, function(inviewObject) {\n      var selector  = inviewObject.data.selector,\n          $element  = inviewObject.$element;\n      return selector ? $element.find(selector) : $element;\n    });\n\n    viewportSize   = viewportSize   || getViewportSize();\n    viewportOffset = viewportOffset || getViewportOffset();\n\n    for (; i<inviewObjects.length; i++) {\n      // Ignore elements that are not in the DOM tree\n      if (!$.contains(documentElement, $elements[i][0])) {\n        continue;\n      }\n\n      var $element      = $($elements[i]),\n          elementSize   = { height: $element[0].offsetHeight, width: $element[0].offsetWidth },\n          elementOffset = $element.offset(),\n          inView        = $element.data('inview');\n\n      // Don't ask me why because I haven't figured out yet:\n      // viewportOffset and viewportSize are sometimes suddenly null in Firefox 5.\n      // Even though it sounds weird:\n      // It seems that the execution of this function is interferred by the onresize/onscroll event\n      // where viewportOffset and viewportSize are unset\n      if (!viewportOffset || !viewportSize) {\n        return;\n      }\n\n      if (elementOffset.top + elementSize.height > viewportOffset.top &&\n          elementOffset.top < viewportOffset.top + viewportSize.height &&\n          elementOffset.left + elementSize.width > viewportOffset.left &&\n          elementOffset.left < viewportOffset.left + viewportSize.width) {\n        if (!inView) {\n          $element.data('inview', true).trigger('inview', [true]);\n        }\n      } else if (inView) {\n        $element.data('inview', false).trigger('inview', [false]);\n      }\n    }\n  }\n\n  $(w).bind(\"scroll resize scrollstop\", function() {\n    viewportSize = viewportOffset = null;\n  });\n\n  // IE < 9 scrolls to focused elements without firing the \"scroll\" event\n  if (!documentElement.addEventListener && documentElement.attachEvent) {\n    documentElement.attachEvent(\"onfocusin\", function() {\n      viewportOffset = null;\n    });\n  }\n}));\n"]}